//Q4//

// Project2_4.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>
using namespace std;

int main(int argc,char * argv[])
{
	char *p = argv[0];
	for (;*p!='\0';*p++)
	{
		char &ref=*p;
		cout<<*p;
	}
	return 0;
}

//anwsers for Q4:
1.A pointer can be re-assigned any number of times while a reference can not be re-seated after binding. 
2.Pointers can point nowhere (NULL), whereas reference always refer to an object.
3.You can't take the address of a reference like you can with pointers.
4.There's no "reference arithmetics" (but you can take the address of an object pointed by a reference and do pointer arithmetics on it as in &obj + 5).

Explaination for the result when trying to use a reference in C++ the way as in exercise3:
1. Apointer can be re-assigned any number of times while a reference can not be re-seated after binding.//



//Q5//

// Project2_5.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>
using namespace std;


int main(int argc, char * argv[])
{
	auto *p = argv[0];
	for (;*p != '\0'; *p++)
		cout<<*p;
	return 0;
}

//anwsers for Q5:
The program showed no difference from exercise3, the variable is just assigned to a pointer automatically.//



//Q6//

// Project2_6.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include<iostream>
using namespace std;


int main(int argc, char * argv[])
{
	for(int i=0;i<argc;++i)
	{
        for(auto *p=*(argv+i);*p != '\0'; *p++)
			cout<<*p;
		cout<<endl;
	}
	return 0;
}

//anwsers to Q6:
The point operator we used is defined as follow:
auto *p=*(argv+i)
This indicates all the characters that were passed as arguments to the program.//



//Q7//

// Project2_7.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>
using namespace std;

//case1
int main(int argc, char * argv[])
{
	decltype(*argv) p=argv[0];
	for(; *p!='\0' ; p++)
		cout<<*p;
	return 0;
}

//case2
int main(int argc, char * argv[])
{
	decltype(*argv+0) p;
	for(p = argv[0]; *p!='\0' ; p++)
		cout<<*p;
	return 0;
}

//anwser for Q7:
In the first case we used the line: decltype(*argv) p=argv[0]; to define *p.
And in the second case we used:
decltype(*argv+0) p;
p = argv[0]; to define *p, which all get the same results with exercise5.//
 




